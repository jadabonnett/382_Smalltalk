'From Pharo10.0.0 of 15 March 2023 [Build information: Pharo-10.0.0+build.538.sha.179ef655ae2b150009a860b127aa3605366659ca (64 Bit)] on 2 April 2023 at 3:25:29.983 pm'!Object subclass: #Polynomial	instanceVariableNames: 'coefficient'	classVariableNames: ''	package: 'COS382'!!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:55'!< aPoly	^ self shouldNotImplement ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:54'!!!= aPoly	^ self ~= aPoly! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:58'!= aPoly    "compares two polynomials"    ^ coefficient = aPoly asArray ! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:00'!asArray	"return array representation"	^ coefficient deepCopy! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!coefficient: power	"return coefficient of power term"	(power >= coefficient size) ifTrue: [ ^ 0 ].	^ coefficient at: power + 1! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!degree	"return degree of polynomial"	^ coefficient size - 1! !!Polynomial methodsFor: 'accessing' stamp: 'JadaBonnett 3/31/2023 14:41'!initialize: initValue	"private: initialize coefficient instance variable"	|x|		(initValue isKindOf: (self class))		ifTrue: [ coefficient := (initValue asArray) deepCopy ]		ifFalse: [			(initValue isKindOf: Array)				ifTrue: [ coefficient := initValue deepCopy ]				ifFalse: [ self initialize ]		].	"[x !!= 0] whileTrue: [ ] ]"! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/5/2015 17:37'!initialize	super initialize.	coefficient := #( 0 )! !!Polynomial methodsFor: 'public access' stamp: 'JadaBonnett 3/29/2023 15:07'!evaluate: in	|value arr len|		value := 0.	arr := self asArray.	len := arr size.	0 to: len-1 do:[:a | 		value := value +  (in * (2 raisedTo:(self coefficient:a)))].	"value := 2 raisedTo:(self coefficient: 0)."	^value! !!Polynomial methodsFor: 'public access' stamp: 'JadaBonnett 3/29/2023 14:35'!evaluate 	|value|	value := UIManager default request: 'Enter a number to evaluate with'.	value := value asInteger.	^ self evaluate: value! !!Polynomial methodsFor: 'primitives - plugin' stamp: 'JadaBonnett 3/29/2023 15:29'!sum:	obj			| total len1 len2 a b count return size|	count := 0.	a := self asArray.	b := obj asArray.	len1 := a size.	len2 := b size.	len2 < len1		ifTrue: [size := len1]		ifFalse: [size := len2].	return := Array new: size.	total := Polynomial new.	 0 to: (size-1) do: [:x | 		return at:(x+1) put:((self coefficient: x) + (obj coefficient: x)) ].	^ return	"check if it's returning as array or polynomial"! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JadaBonnett 4/2/2023 15:18'!graphFrom: f graphTo: t	| c p xs ys arr len a |		f == t ifTrue: [Transcript open; clear; show: 'ERROR: You need to choose a range of numbers, not the same number'; cr. ^false].	arr := self asArray. 	len := arr size.	xs := f to: t count: 100.	ys := xs collect: [ :x | self evaluate: x].	c := RSChart new.	p := RSLinePlot new x: xs y: ys.	c addPlot: p.	c title: 'poly graph'.	c xlabel: 'x'.	c ylabel: 'y'.	c addDecoration: RSHorizontalTick new.	c addDecoration: RSVerticalTick new.	c inspect! !!Polynomial methodsFor: 'as yet unclassified' stamp: 'JadaBonnett 3/31/2023 15:09'!differentiate	|arr len return|		arr := self asArray.	len := arr size.	len>1		ifTrue: [return := Array new: len-1.			1 to: len-1 do:[:a |						return at: a put:(a*(self coefficient:a))]]		ifFalse: [^[]].	^return! !